#! /bin/sh
### BEGIN INIT INFO
# Provides:		radicale
# Required-Start:	$remote_fs
# Required-Stop:	$remote_fs
# Should-Start:		$syslog
# Default-Start:	2 3 4 5
# Default-Stop:
# Short-Description:	Radicale CalDAV and CardDAV server
# Description:		Start/Stop the Radicale CalDAV and CardDAV
#			server, configurable via /etc/default/radicale.
### END INIT INFO

# Author: Martin Stigge <martin@stigge.org>

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin:/usr/local/bin
DESC="Radicale CalDAV server"
NAME=radicale
DAEMON=/usr/local/bin/$NAME
DAEMON_UID=radicale
DAEMON_GID=radicale
RUNDIR=/var/run/$NAME
PIDFILE=$RUNDIR/$NAME.pid
CALDIR=/var/lib/$NAME
LOGDIR=/var/log/$NAME
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

# Declare default options
RADICALE_OPTS="--daemon"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

#
# Check whether daemon starting is enabled
#
check_start_daemon() {
	if [ ! "$ENABLE_RADICALE" = "yes" ]; then
		[ "$VERBOSE" != no ] && \
			log_warning_msg "Not starting radicale, disabled via /etc/default/radicale"
		return 1
	else
		return 0
	fi
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	for dir in $RUNDIR $CALDIR; do
		[ -d $dir ] || mkdir -p $dir
		if ! dpkg-statoverride --list $dir >/dev/null 2>&1; then
			chown $DAEMON_UID:$DAEMON_GID $dir
			chmod g-w,o-rwx $dir
		fi
	done
	[ -d $LOGDIR ] || mkdir -p $LOGDIR
	if ! dpkg-statoverride --list $LOGDIR >/dev/null 2>&1; then
		chown $DAEMON_UID:adm $LOGDIR
		chmod g-w,o-rwx $LOGDIR
	fi

	start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \
		--name $NAME --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \
		--name $NAME --umask 0027 --chuid $DAEMON_UID:$DAEMON_GID -- \
		--pid=$PIDFILE $RADICALE_OPTS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
}

case "$1" in
  start)
	check_start_daemon || exit 0
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		check_start_daemon || exit 0
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
